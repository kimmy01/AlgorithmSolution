import java.util.*;
class Solution {
    static int[] dr = {-1, 1, 0, 0};
    static int[] dc = {0, 0, -1, 1};
    static int destinationN;
    static int destinationM;
    static boolean[][] visited;
    public int solution(int[][] maps) {
        int answer = 0;
        destinationN = maps.length -1;
        destinationM = maps[0].length -1;
        visited = new boolean[destinationN+1][destinationM+1];
        
        ///BFS///
        
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{0, 0, 1});
        visited[0][0] = true;
        while(!q.isEmpty()){
            int[] tmp = q.poll();
            for(int i=0; i<4; i++){
                int nr = tmp[0] + dr[i];
                int nc = tmp[1] + dc[i];
                if(inRange(nr, nc) && !visited[nr][nc] && maps[nr][nc] != 0){
                    maps[nr][nc] = tmp[2]+1;
                    visited[nr][nc] = true;
                    q.add(new int[] {nr, nc, maps[nr][nc]});
                }
            }
        }
        
        /////////
        
        if(maps[destinationN][destinationM] == 1){
            answer = -1;
        }else{
            answer = maps[destinationN][destinationM];
        }
        
        return answer;
    }
    
    static boolean inRange(int nr, int nc){
        if(0<=nr && nr<=destinationN && 0<=nc && nc<=destinationM) return true;
        return false;
    }
}
